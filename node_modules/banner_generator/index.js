var Banner =function(banner, rootSite, temporaryFolder, nameLogo, banners, callback){

	this.im 				= require('imagemagick');
	this.fs 				= require('fs');
	this.sanitizer	 		= require('sanitizer');
	this.config		 	= banner.config;
	this.bannerOptions 		= banner.options;
	this.rootSite 			= rootSite+'/';
	this.tmpFolder 			= this.rootSite+temporaryFolder;
	this.logoImgName		= nameLogo;
	this.logo 			= this.rootSite+temporaryFolder+nameLogo;
	this.backgroundCreated 	= false;
	this.texts 			= [];
	this.textImages 		= {};
	this.images 			= [];
	this.shapes 			= [];
	this.shapesObj 		= {};
	this.extras			= [];
	this.calls			= [];
	this.banners 			= banners;
	this.callback			= callback;

	this.init();
}

//Creates texts, images and shapes of the banner
Banner.prototype.init = function(){

	this.size = this.bannerOptions.size;

	this.bannerImgName = typeof this.bannerOptions.texts.appName.content != 'undefined' ? this.tmpFolder+this.sanitizer.sanitizeFilename(this.config.name+'_'+this.bannerOptions.texts.appName.content+'_'+this.size)+'.png' :  this.tmpFolder+Math.floor(Math.random()*10000) +'.png';

	//Creation du tableau des textes à insérer
	for (text in this.config[this.size].texts){

		//Injection des variables passées en paramètre ie saisies par l utilisateur, non définies ds le fichier de config
		
		//Cas du contenu du texte
		if (this.bannerOptions.texts[text].content != '' && typeof this.bannerOptions.texts[text].content != 'undefined' ){
			

			//Cas ou il y a une casse particulière
			if(typeof this.config[this.size].texts[text].case !='undefined'){
				switch(this.config[this.size].texts[text].case){
					case 'lowercase':
					this.bannerOptions.texts[text].content = this.bannerOptions.texts[text].content.toLowerCase();
					break;

					case 'uppercase':
					this.bannerOptions.texts[text].content = this.bannerOptions.texts[text].content.toUpperCase();
					break;

					default :
					this.bannerOptions.texts[text].content = this.bannerOptions.texts[text].content;
					break;				
				}
			}
			//cas ou on a une différence de texte selon la langue
			if(typeof this.config[this.size].texts[text].content == 'object' ){
				this.config[this.size].texts[text].content = this.config[this.size].texts[text].content[this.bannerOptions.lang].replace('{content}', this.bannerOptions.texts[text].content);
			}
			else{
				this.config[this.size].texts[text].content = this.config[this.size].texts[text].content.replace('{content}', this.bannerOptions.texts[text].content );	
			}
		}

		if (this.bannerOptions.texts[text].color != '' && typeof this.bannerOptions.texts[text].color != 'undefined' ){
			this.config[this.size].texts[text].color = this.config[this.size].texts[text].color.replace('{color}', this.bannerOptions.texts[text].color );
			
		}
	}

	//Creation du tableau des images à insérer
	for (image in this.config[this.size].images){
		this.config[this.size].images[image].src = this.config[this.size].images[image].src.replace('{language}', this.bannerOptions.lang);		
	}

	for (extra in this.config[this.size].extras){
		if(typeof this.config[this.size].extras.images !='undefined') {
			for (imageExtra in this.config[this.size].extras.images){
				this.config[this.size].extras.images[imageExtra].src = typeof this.config[this.size].extras.images[imageExtra].folder !='undefined' ? this.config[this.size].extras.images[imageExtra].folder.replace('{language}', this.bannerOptions.lang)+this.config[this.size].extras.images[imageExtra].src.replace('{src}', this.bannerOptions.extras.images[imageExtra].src) : this.config[this.size].extras.images[imageExtra].src.replace('{src}', this.bannerOptions.extras.images[imageExtra].src);
			}
	
		}
		
		if(typeof this.config[this.size].extras.shapes !='undefined') {
			for (shapeExtra in this.config[this.size].extras.shapes){
				this.config[this.size].extras.shapes[shapeExtra].color = this.config[this.size].extras.shapes[shapeExtra].color.replace('{color}', this.bannerOptions.extras.shapes[shapeExtra].color);	
			}
	
		}	
	}

	this.texts = this.mergeObjects(this.bannerOptions.texts, this.config[this.size].texts);

	this.images = this.mergeObjects(this.bannerOptions.images, this.config[this.size].images);
	if(typeof this.config[this.size].extras !='undefined' && typeof this.config[this.size].extras.images !='undefined'){
		this.images = this.mergeObjects(this.images, this.config[this.size].extras.images);
	}
	this.nbImages = parseInt(Object.keys(this.images).length, 10);


	this.shapes = this.mergeObjects(this.bannerOptions.shapes, this.config[this.size].shapes);
	if(typeof this.config[this.size].extras !='undefined' && typeof this.config[this.size].extras.shapes !='undefined'){
		this.shapes = this.mergeObjects(this.shapes, this.config[this.size].extras.shapes);
	}

	this.createStackFunctions();
}


Banner.prototype.createStackFunctions = function(){

	this.calls.push(this.pasteImages);
	
	this.calls.push(this.createTexts);
	this.calls.push(this.pasteTexts);

	this.calls.push(this.createShapes);
	this.calls.push(this.pasteShapes);


	this.calls.push(this.resizeLogoToMask);
	this.calls.push(this.maskLogo);
	this.calls.push(this.resizeLogo);
	this.calls.push(this.pasteLogo);

	this.executeNext(this);

}

//Paste all images on the background
Banner.prototype.pasteImages = function(obj){

	var	allImages 		= obj.images,
		imagesLength 	= parseInt(Object.keys(obj.images).length, 10),
		currentKey 		= Object.keys(obj.images)[0];

	//Si c est la premiere image qu on colle, le background est ds le dossier des images
	if(imagesLength == obj.nbImages){
		var srcBackground = obj.config[obj.size].backgroundImage.src.replace('{language}', obj.bannerOptions.lang);
	}
	//Sinon, on continue à coller sur la bannière nouvellement créée
	else{
		var srcBackground = obj.bannerImgName;
	}

	//Sil n y a plus d images à coller, on passe à la fonction suivante
	if(imagesLength == 0){
		obj.executeNext(obj);
		return true;
	}
	
	obj.im.composite(['-geometry', '+'+allImages[currentKey].x+'+'+allImages[currentKey].y+'', obj.rootSite+allImages[currentKey].src, srcBackground ,obj.bannerImgName],
			function(err, stdout, stderr){
				if (err) 
				{
					throw err;
				}
				
				delete obj.images[currentKey];
				console.log('>> done paste Image');
				obj.pasteImages(obj);	
				
		});
}

//Creates all texts, convert it to image
Banner.prototype.createTexts = function(obj){

	var 	allTexts		= obj.texts,
		allTextsLength 	= parseInt(Object.keys(obj.texts).length, 10);
		currentKey 		= Object.keys(obj.texts)[0];
 	

	if(allTextsLength == 0){
		obj.executeNext(obj);
		return;
	}
		

		var 	index = parseInt(Object.keys(obj.textImages).length, 10);
			imgName = obj.tmpFolder+'text_'+index+'.png',
			textImage = {};
			textImage.x=allTexts[currentKey].x;
			textImage.y=allTexts[currentKey].y;
			textImage.src=imgName;
		
		obj.textImages[index]=textImage;


		obj.im.convert([  '-font', allTexts[currentKey].font, '-pointsize' ,obj.convertPixelsToPoints(allTexts[currentKey].size), '-fill',  allTexts[currentKey].color, '-background', 'transparent', 'label:'+  allTexts[currentKey].content, imgName ],
				function(err, stdout, stderr){
					if (err) 
					{
						throw err;
					}
					delete obj.texts[currentKey];
					console.log('>> done create Text');	
					obj.createTexts(obj);
		});		
}

//Paste the texts, converted in images
Banner.prototype.pasteTexts = function(obj){
		
	var 	allTextsLength 	= parseInt(Object.keys(obj.textImages).length , 10)
		index 			= parseInt(Object.keys(obj.textImages).length , 10)-1;

	if (allTextsLength == 0){
		obj.executeNext(obj);	
		return true;	
	}

	//Est ce la première image qu on colle sur le background ?
	if(obj.nbImages == 0 && obj.backgroundCreated == false ){
		var background = obj.config[obj.size].backgroundImage.src.replace('{language}', obj.bannerOptions.lang);
		obj.backgroundCreated = true;
	}
	else{
		var background = obj.bannerImgName;
	}

		obj.im.composite(['-geometry', '+'+obj.textImages[index].x+'+'+obj.textImages[index].y+'', obj.textImages[index].src, background ,obj.bannerImgName],
					function(err, stdout, stderr){
						if (err) 
						{
							throw err;
						}
						obj.fs.unlinkSync(obj.textImages[index].src);
						delete obj.textImages[index];
						console.log('>> done paste text');
						obj.pasteTexts(obj);
				});
}

//Creates all the shapes
Banner.prototype.createShapes = function(obj){

	var 	allShapes		= obj.shapes,
		allShapesLength 	= parseInt(Object.keys(obj.shapes).length, 10);
		currentKey 		= Object.keys(obj.shapes)[0];
 	

	if(allShapesLength == 0){
		obj.executeNext(obj);
		return;
	}
		
	var 	index = parseInt(Object.keys(obj.shapesObj).length, 10);
		shapeName = 'shape_'+index+'.png',
		shapeElem = {};
		shapeElem.x=allShapes[currentKey].x;
		shapeElem.y=allShapes[currentKey].y;
		shapeElem.src=shapeName;

		obj.shapesObj[index]=shapeElem;

		obj.im.convert(['-size', ''+allShapes[currentKey].width+'x'+allShapes[currentKey].height+'' , 'xc:'+allShapes[currentKey].color+'',  '-fill', allShapes[currentKey].color, '-draw', ''+allShapes[currentKey].type+' 0,0,'+allShapes[currentKey].width+','+allShapes[currentKey].height+'' , obj.tmpFolder+shapeName],
				function(err, stdout, stderr){
					if (err) 
					{
						throw err;
					}
					if(typeof allShapes[currentKey].mask!='undefined'){
						obj.maskShape(obj, allShapes[currentKey], shapeName);
					}
					else{
						delete obj.shapes[currentKey];
						console.log('>> done  create shape');	
						obj.createShapes(obj);
					}
		});		
}



Banner.prototype.maskShape = function(obj, shape, shapeName){
	obj.im.composite(['-compose', 'CopyOpacity', obj.rootSite+shape.mask , obj.tmpFolder+shapeName , obj.tmpFolder+shapeName], function(err, stdout, stderr){
						if(err) throw err;
							console.log('>> done mask shape');
							delete obj.shapes[currentKey];	
							obj.createShapes(obj);
						});
}

//Pastes all the shapes on the background
Banner.prototype.pasteShapes = function(obj){
		
	var 	allShapesLength 	= parseInt(Object.keys(obj.shapesObj).length , 10)
		index 			= parseInt(Object.keys(obj.shapesObj).length , 10)-1;

	if (allShapesLength == 0){
		obj.executeNext(obj);	
		return true;	
	}

	obj.im.composite(['-geometry', '+'+obj.shapesObj[index].x+'+'+obj.shapesObj[index].y+'', obj.tmpFolder+obj.shapesObj[index].src, obj.bannerImgName ,obj.bannerImgName],
					function(err, stdout, stderr){
						if (err) 
						{
							throw err;
						}
						obj.fs.unlinkSync(obj.tmpFolder+obj.shapesObj[index].src);
						delete obj.shapesObj[index];
						console.log('>> done paste shape');
						obj.pasteTexts(obj);
				});
}

//Resize application logo
Banner.prototype.resizeLogoToMask = function(obj){
	
	obj.logoResized=obj.size+Math.floor(Math.random()*10000000)+'_'+obj.logoImgName;

	obj.im.composite(['-resize', '175x175', obj.tmpFolder+obj.logoImgName,  obj.tmpFolder+obj.logoImgName, obj.tmpFolder+obj.logoResized ], function(err, stdout, stderr){
			 	if (err) 
	    			{
	    				throw err;
	    			}
	    			console.log('>> done resize logoToMask');
	    			obj.executeNext(obj);
	 });	
}

//Applies mask on the logo
Banner.prototype.maskLogo = function(obj){

	obj.im.composite(['-compose', 'CopyOpacity', obj.rootSite+obj.config.mask , obj.tmpFolder+obj.logoResized , obj.tmpFolder+obj.logoResized], function(err, stdout, stderr){
			if(err) throw err;
			console.log('>> done mask logo');
			obj.executeNext(obj);
	});	
}

//Resizes the logo 
Banner.prototype.resizeLogo = function(obj){
	obj.im.composite(['-resize', ''+obj.config[obj.size].logo.width+'x'+obj.config[obj.size].logo.height+'', obj.tmpFolder+obj.logoResized,  obj.tmpFolder+obj.logoResized, obj.tmpFolder+obj.logoResized ], function(err, stdout, stderr){
			 	if (err) 
	    			{
	    				throw err;
	    			}
	    			console.log('>> done resize logo');
	    			obj.executeNext(obj);
	 });	
}

//Pastes the app logo on the background
Banner.prototype.pasteLogo = function(obj){

	var src = obj.bannerImgName;

	obj.im.composite(['-geometry', '+'+obj.config[obj.size].logo.x+'+'+obj.config[obj.size].logo.y+'', obj.tmpFolder+obj.logoResized, src ,src],
				function(err, stdout, stderr){
					if (err) 
					{
						throw err;
					}
					console.log('>> done paste Logo');
	    				obj.fs.unlinkSync(obj.tmpFolder+obj.logoResized)
	    				obj.executeNext(obj);
			});
}

//Calls next function
Banner.prototype.executeNext = function(obj){
	if (obj.calls.length == 0){
		return obj.callback(obj.bannerImgName);
	}
	var func = obj.calls.shift();
	func(obj);
}

Banner.prototype.convertPixelsToPoints = function(size){
	return Math.ceil(size * 1.333);
}

Banner.prototype.mergeObjects = function(objOne, objTwo){
	if (objOne instanceof Array) {
		return objOne.concat(objTwo);
	}

	var merge = {};
	var property;
	
	for (property in objOne) {
		merge[property] = objOne[property];
	}
	
	for (property in objTwo) {
		merge[property] = objTwo[property];
	}
	return merge;
}

module.exports= Banner;