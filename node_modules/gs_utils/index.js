/**
 * [uploads an image on the storage]
 * @param  {string}   pathToGSUtils  		[path to gs_utils on the disk]
 * @param  {string}   file           		[path to the image on the disk]
 * @param  {string}   bucket         		[Name of the bucket where the image will be uploaded]
 * @param  {Function} cb             		[callback function]
 * @param  {string}   baseUrlStorage 	[Base Url of the storage]
 * @return {[type]}                  [description]
 */
function uploadImage (pathToGSUtils, file, bucket, cb, baseUrlStorage){
	var 	exec 	= require('child_process').exec,
		fs 	= require('fs');

	filename = getFilename(file);

	exec(pathToGSUtils+" cp  -a public-read "+file+" gs://"+bucket+filename , function callback(error, stdout, stderr){
	   	if (error ) {
	   		throw error ;
	   	}	
			exec(pathToGSUtils+' setmeta -h "Content-Type:image/png" gs://'+bucket+filename , function callback(error, stdout, stderr){
				if (error ) {
	   				throw error ;
	   			}
	   			if(typeof cb == 'function'){
	   				fs.unlinkSync(file);
	   				var linkToImage = baseUrlStorage+'/'+bucket+filename;
	   				cb(linkToImage);
	   			}	
			});
	});
}

/**
 * [uploads an image on the storage]
 * @param  {string}   pathToGSUtils  		[path to gs_utils on the disk]
 * @param  {string}   file           		[path to the html file on the disk]
 * @param  {string}   bucket         		[Name of the bucket where the html file will be uploaded]
 * @param  {Function} cb             		[callback function]
 * @param  {string}   baseUrlStorage 	[Base Url of the storage]
 * @return {[type]}                  [description]
 */
function uploadHtml (pathToGSUtils, file, bucket, cb, baseUrlStorage){
	var exec = require('child_process').exec;
	
	var filename = getFilename(file);
	exec(pathToGSUtils+" cp  -a public-read "+file+" gs://"+bucket+filename , function callback(error, stdout, stderr){
	   	if (error ) {
	   		throw error ;
	   	}	
			exec(pathToGSUtils+' setmeta -h "Content-Type:text/html" gs://'+bucket+filename , function callback(error, stdout, stderr){
				if (error ) {
	   				throw error ;
	   			}
	   			if(typeof cb == 'function'){
	   				fs.unlinkSync(file);
	   				var linkToHtml = baseUrlStorage+'/'+bucket+filename;
	   				cb(linkToHtml);
	   			}	
			});
	});
}

/**
 * [returns file name upon a path to a file]
 * @param  {string} file 	[path to the file on the disk]
 * @return {string}      		[filename]
 */
function getFilename(file){
	var filename = file.split('/');
	filename = filename[filename.length-1];
	return filename;
}

module.exports.uploadImage = uploadImage;
module.exports.uploadHtml = uploadHtml;